@inject HttpClient Http
@inject ILocalStorageService localStorage
@page "/Registration"

<head>
    <title>NotSocialNetwork - Login</title>
    <link href="/css/Registration.css" rel="stylesheet">
</head>

<div class="TitleContainer">
    <span>
        @message
    </span>
</div>
<EditForm Model="newUserDTO" OnValidSubmit="@SendNewUser"
          action="#" class="main-container-form">
    <div class="form-container">
        <InputText @bind-Value="newUserDTO.Name"
                   class="form-container--input" placeholder="Никнейм"/>
    </div>
    <div class="form-container">
        <InputText @bind-Value="newUserDTO.Email"
                   type="Email" class="form-container--input" placeholder="Email"/>
    </div>
    <div class="form-container">
        <InputDate TValue="DateTimeOffset" @bind-Value="newUserDTO.DateOfBirth"
                   placeholder="Ваш день рождения"
                   class="form-container--input"/>
    </div>
    <div class="form-container">
        <button type="submit" class="form-container--submitButton">
            Зарегистрироваться
        </button>
    </div>
</EditForm>

@code{
    string message;

    RegistrationUserDTO newUserDTO = new();

    async Task SendNewUser()
    {
        try
        {
            var result = await Http.PostAsJsonAsync<RegistrationUserDTO>
                               ($"{HttpHelper.APIAddress}user", newUserDTO);

            if (result.IsSuccessStatusCode)
            {
                CookieHelper.SetEmailAtCookies(localStorage, newUserDTO.Email);
                message = "Вы были успешно зарегистрированы!";
            }
            else
                message = "Произошла ошибка при попытке регистрации. :с";
        }
        catch (HttpRequestException httpReqEx)
        {
            switch (httpReqEx.StatusCode)
            {
                case HttpStatusCode.NotFound:
                    message = "Упс, сервер не нашёл, куда вас поместить. Попробуйте позже.";
                    break;
                case HttpStatusCode.BadRequest:
                    message = "Что-то пошло не так, попробуйте изменить пост. Попробуйте позже.";
                    break;
                case HttpStatusCode.Conflict:
                    message = "Сервер борется со злом внутри, оставьте его в покое.";
                    break;
                case HttpStatusCode.Forbidden:
                    message = "Сервер отказался выполнять запрос, это БУНД!";
                    break;
                case HttpStatusCode.Gone:
                    message = "Попытка общения с мёртвым закончилась полным провалом...";
                    break;
                default:
                    message = "Сервер не активен. Пожалуйста, попробуйте позже.";
                    break;
            }
        }
        catch (Exception)
        {
            message = "Произошла ошибка, которую разработчикам было лень обрабатывать. \n" +
                        "Если не затруднит, обратитесь к одному из них по ссылкам внизу страницы.";
        }
    }
}
