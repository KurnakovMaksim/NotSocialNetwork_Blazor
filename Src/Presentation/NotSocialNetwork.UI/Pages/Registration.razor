@page "/Registration"

@inject HttpClient Http
@inject ILocalStorageService localStorage
@inject NavigationManager NavNanager

@using System.IO

<head>
    <title>NotSocialNetwork - Login</title>
    <link href="/css/Registration.css" rel="stylesheet">
</head>

<div class="TitleContainer">
    <span>
        @message
    </span>
</div>
<EditForm Model="newUserDTO" OnValidSubmit="@SendNewUser"
          action="#" class="main-container-form">
    <div class="form-container">
        <InputText @bind-Value="newUserDTO.Name"
                   class="form-container--input" placeholder="Никнейм" />
    </div>
    <div class="form-container">
        <InputText @bind-Value="newUserDTO.Email"
                   type="Email" class="form-container--input" placeholder="Email" />
    </div>
    <div class="form-container">
        <InputDate TValue="DateTimeOffset" @bind-Value="newUserDTO.DateOfBirth"
                   placeholder="Ваш день рождения"
                   class="form-container--input" />
    </div>
    <div class="form-container">
        <button type="submit" class="form-container--submitButton">
            Зарегистрироваться
        </button>
    </div>
    <div class="form-container">
        <InputFile class="form-container--file" OnChange="@AddAvatar" accept=".png, .jpeg, .jpg" />
    </div>
</EditForm>

@code{
    string message;
    const long _MAX_FILE_SIZE = 20971520;

    InputFileChangeEventArgs loadedFileArgs;
    RegistrationUserDTO newUserDTO = new();


    bool CheckFileSize(IBrowserFile file)
    {
        if (file.Size > _MAX_FILE_SIZE)
        {
            return false;
        }
        return true;
    }

    void AddAvatar(InputFileChangeEventArgs inputFile)
    {
        loadedFileArgs = inputFile;
    }

    public async Task<string> SaveAvatar()
    {
        string newFileName = Guid.NewGuid().ToString();

        if (CheckFileSize(loadedFileArgs.File))
        {
            await using FileStream fs = new($@"wwwroot\images\{newFileName}.jpeg", FileMode.Create);
            await loadedFileArgs.File.OpenReadStream(_MAX_FILE_SIZE).CopyToAsync(fs);

            return newFileName;
        }
        return "";
    }

    async Task SendNewUser()
    {
        try
        {
            if (UserValidityCheck(newUserDTO))
            {
                string imageTitle = await SaveAvatar();
                if (string.IsNullOrEmpty(imageTitle) == false)
                {
                    newUserDTO.Image = new();
                    newUserDTO.Image.Title = imageTitle;

                    var result = await Http.PostAsJsonAsync<RegistrationUserDTO>
                                       ($"{HttpHelper.APIAddress}user", newUserDTO);

                    CookieHelper.SetEmailAtCookies(localStorage, newUserDTO.Email);
                    message = "Вы были успешно зарегистрированы!";
                }
                else
                {

                }
            }
        }
        catch (HttpRequestException httpReqEx)
        {
            switch (httpReqEx.StatusCode)
            {
                case HttpStatusCode.NotFound:
                    message = "Упс, сервер не нашёл, куда вас поместить. Попробуйте позже.";
                    break;
                case HttpStatusCode.BadRequest:
                    message = "Что-то пошло не так, попробуйте изменить пост. Попробуйте позже.";
                    break;
                case HttpStatusCode.Conflict:
                    message = "Сервер борется со злом внутри, оставьте его в покое.";
                    break;
                case HttpStatusCode.Forbidden:
                    message = "Сервер отказался выполнять запрос, это БУНД!";
                    break;
                case HttpStatusCode.Gone:
                    message = "Попытка общения с мёртвым закончилась полным провалом...";
                    break;
                default:
                    message = "Сервер не активен. Пожалуйста, попробуйте позже.";
                    break;
            }
        }
        catch (Exception)
        {
            message = "Произошла ошибка, которую разработчикам было лень обрабатывать. \n" +
                        "Если не затруднит, обратитесь к одному из них по ссылкам внизу страницы.";
        }
    }

    private bool UserValidityCheck(RegistrationUserDTO newUserDTO)
    {
        if (newUserDTO != null && string.IsNullOrWhiteSpace(newUserDTO.Email) == false &&
            string.IsNullOrWhiteSpace(newUserDTO.Name) == false && loadedFileArgs != null)
        {
            return true;
        }
        return false;
    }
}
