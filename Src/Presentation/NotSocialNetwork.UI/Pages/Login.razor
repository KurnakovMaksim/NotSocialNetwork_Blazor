@page "/Login"

@inject HttpClient Http
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<head>
    <title>NotSocialNetwork - Login</title>
    <link href="/css/Registration.css" rel="stylesheet">
</head>

<div class="TitleContainer">
    <span>
        @message
    </span>
</div>
<EditForm Model="loginDTO" OnValidSubmit="@SendUserForAuthentication"
          class="main-container-form">
    <div class="form-container">
        <InputText @bind-Value="loginDTO.Email"
                   type="Email" class="form-container--input" placeholder="Email" />
    </div>
    <div class="form-container">
        <button type="submit" class="form-container--submitButton">
            Войти
        </button>
    </div>
</EditForm>

@code {
    string message;
    LoginDTO loginDTO = new();

    async Task SendUserForAuthentication()
    {
        var result = await Http.PostAsJsonAsync
                    ("https://localhost:44353/api/authentication", loginDTO);

        //TODO: We need TryCatch!
        if (result.IsSuccessStatusCode)
        {
            LoginResult tokenAndGuid = await result.Content.ReadFromJsonAsync<LoginResult>();

            await WriteTokenAsCookies(tokenAndGuid.Token);

            await WriteGuidIdAsCookies(tokenAndGuid.UserId);


            NavigationManager.NavigateTo("/");
        }
        else
        {
            message = "Пользователь с такими данными не найден или произошла ошибка!";
        }
    }

    async Task WriteTokenAsCookies(string token)
    {
        await localStorage.SetItemAsync<string>("token", token);
    }

    async Task WriteGuidIdAsCookies(Guid id)
    {
        await localStorage.SetItemAsync<Guid>("id", id);
    }
}
