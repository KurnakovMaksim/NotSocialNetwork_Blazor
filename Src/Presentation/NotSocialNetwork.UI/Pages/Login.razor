@page "/Login"

@inject HttpClient Http
@inject ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<head>
    <title>NotSocialNetwork - Login</title>
    <link href="/css/Registration.css" rel="stylesheet">
</head>

<EditForm Model="loginDTO" OnValidSubmit="@SendUserForAuthentication"
          class="main-container-form">
    <div class="form-container">
        <InputText @bind-Value="loginDTO.Email"
                   type="Email" class="form-container--input" placeholder="Email" />
    </div>
    <div class="form-container">
        <button type="submit" class="button">
            Войти
        </button>
    </div>
</EditForm>

<Popap Message="@message" />

@code {
    string message;
    LoginDTO loginDTO = new();

    
    async Task SendUserForAuthentication()
    {
        try
        {
            var result = await Http.PostAsJsonAsync
                        ($"{HttpHelper.APIAddress}authentication", loginDTO);

            if (result.IsSuccessStatusCode)
            {
                LoginResult tokenAndGuid = await result.Content.ReadFromJsonAsync<LoginResult>();

                await CookieHelper.SetNewUserCookies
                    (localStorage, tokenAndGuid.UserId, tokenAndGuid.Token, loginDTO.Email);

                CurrentUserData.SetNewData(tokenAndGuid.UserId, tokenAndGuid.Token, loginDTO.Email);
                CurrentUserData.IsAuthorized = true;

                NavigationManager.NavigateTo("/");
            }
            else
            {
                message = "Пользователь с такими данными не найден или произошла ошибка!";
            }
        }
        catch (HttpRequestException httpReqEx)
        {
            switch (httpReqEx.StatusCode)
            {
                case HttpStatusCode.NotFound:
                    message = "Сервер не нашёл вас, проверьте корректность введённых данных.";
                    break;
                case HttpStatusCode.BadRequest:
                    message = "Что-то пошло не так, попробуйте позже.";
                    break;
                case HttpStatusCode.Conflict:
                    message = "Сервер борется со злом внутри, оставьте его в покое.";
                    break;
                case HttpStatusCode.Forbidden:
                    message = "Сервер отказался выполнять запрос, это БУНД!";
                    break;
                case HttpStatusCode.Gone:
                    message = "Попытка общения с мёртвым закончилась полным провалом...";
                    break;
                default:
                    message = "Сервер не активен. Пожалуйста, попробуйте позже.";
                    break;
            }
        }
        catch (Exception)
        {
            message = "Произошла ошибка, которую разработчикам было лень обрабатывать. \n" +
                        "Если не затруднит, обратитесь к одному из них по ссылкам внизу страницы.";
        }
    }
}
