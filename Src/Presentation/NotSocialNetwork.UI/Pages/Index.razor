@page "/"
@inject HttpClient Http
@inject ILocalStorageService localStorage


<SubmitPostBox Http="Http" DarkThemeCssClass="@_submitPostBoxDarkClass" LocalStorage="localStorage" />

@if (posts.Any())
{
    <Post Http="Http" Posts="posts.ToList()" DarkThemeCssClass="@_postDarkClass" />
}
else
{
    <span>@message</span>
}

@code{
    IEnumerable<PublicationDTO> posts;
    string message;
    string _emailOfCurrentUser;

    #region ClassVariables

    string _submitPostBoxDarkClass = "";
    string _postDarkClass = "";

    #endregion


    #region RenderMethods

    protected async override Task OnInitializedAsync()
    {
        // Do not change the ad logic for the posts variable.
        // otherwise, when the page is rendered, it will be reset to zero.
        posts = new List<PublicationDTO>();

        await GetPostsAsync();
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        bool isNightTheme = await CookieHelper.GetNightThemeCookies(localStorage);

        SetBackgroundStyles(isNightTheme);
    }

    #endregion


    async Task GetPostsAsync()
    {
        try
        {
            posts = await Http.GetFromJsonAsync<IEnumerable<PublicationDTO>>
                ($"{HttpHelper.APIAddress}publication/index=0");
        }
        catch (HttpRequestException httpReqEx)
        {
            switch (httpReqEx.StatusCode)
            {
                case HttpStatusCode.NotFound:
                    message = "Упс, пока что постов нет...";
                    break;
                case HttpStatusCode.BadRequest:
                    message = "Сервер не понимает нас, возможно мы расстались. \n" +
                                "Попробуйте повторить попытку позже.";
                    break;
                case HttpStatusCode.Conflict:
                    message = "Сервер борется со злом внутри, оставьте его в покое.";
                    break;
                case HttpStatusCode.Forbidden:
                    message = "Сервер отказался выполнять запрос, это БУНД!";
                    break;
                case HttpStatusCode.Gone:
                    message = "Попытка общения с мёртвым закончилась полным провалом...";
                    break;
                default:
                    message = "Сервер вернул неизвестный статус код. \n" +
                        "Если не затруднит, обратитесь к одному из разработчиков " +
                        "по ссылкам внизу страницы.";
                    break;
            }
        }
        catch (Exception)
        {
            message = "Произошла ошибка, которую разработчикам было лень обрабатывать. \n" +
                        "Если не затруднит, обратитесь к одному из них по ссылкам внизу страницы.";
        }
    }

    void SetBackgroundStyles(bool isNightTheme)
    {
        if (string.IsNullOrEmpty(_postDarkClass) && isNightTheme)
        {
            _submitPostBoxDarkClass = CssStyles.DarkWindowClass;
            _postDarkClass = CssStyles.DarkWindowClass;
        }
        else if (string.IsNullOrEmpty(_postDarkClass) == false && !isNightTheme)
        {
            _submitPostBoxDarkClass = ""; _postDarkClass = "";
        }
        else
        {
            return;
        }
        StateHasChanged();
    }
}