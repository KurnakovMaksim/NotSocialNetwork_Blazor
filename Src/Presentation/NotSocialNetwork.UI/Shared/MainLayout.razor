@inherits LayoutComponentBase
@inject ILocalStorageService localStorage

<head>
    <meta charset="utf-8" />
    <title>NewsSite</title>
    <link rel="stylesheet" href="../css/DefaultStyles.css">
</head>

<main style="background-color: @_main_BackColor; color: @_main_Color;">
    <header>
        <div class="header-container">
            <a href="/">
                <div style="background: url(@TitleReference) 0 0/100% 100% no-repeat; width: 170px; height: 50px;" class="header-container-Logo"></div>
            </a>
            <nav class="header-container-navmenu">
                <button class="navmenu-settings" @onclick="@OpenInputContainer"></button>
                <div style="visibility: @_viewOfNavmenuButtons" class="inputContainer">
                    <button @onclick="@EditNightThemeCookies" class="inputContainer--button">Переключить ночную тему </button>
                </div>
            </nav>
        </div>
    </header>
    <SubNavMenu />

    <div class="main-contaner">
        @Body
    </div>
</main>

<footer style="background-color: @_footer_BackColor; color: @_footer_Color;">
    <div>
        <span> Site by Ulyanov Ivan & Kurnakov Maksim. </span>
    </div>
    <RefContainer ReferenceColor="@_refColor" ReferencesData="ReferenceData" />
</footer>

@code{
    string _viewOfNavmenuButtons = "none";

    #region styleOfVariablesAndReferences

    string _main_BackColor;
    string _main_Color;
    string _footer_BackColor;
    string _footer_Color;
    string _refColor;

    string TitleReference;

    private const string TitleBlackRef = "../css/images/TitleIconBlack.png";
    private const string TitleWhiteRef = "../css/images/TitleIconWhite.png";

    #endregion

    Dictionary<string, string> ReferenceData = new();

    #region RenderingMethods

    protected override void OnInitialized()
    {
        ReferenceData.Add("https://github.com/Ulyanov-programmer", "Ulyanov GitHub,");
        ReferenceData.Add("https://vk.com/h.wilson", "Ulyanov VK");
        ReferenceData.Add("https://github.com/KurnakovMaksim", "Kurnakov GitHub,");
        ReferenceData.Add("https://vk.com/makskurnakov2003", "Kurnakov VK");
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var cookieResult = await localStorage.GetItemAsync<bool>("nightTheme");
            SetStylesOfNightTheme(cookieResult);
        }
    }

    #endregion


    void SetStylesOfNightTheme(bool cookieOfNightThemeValue)
    {
        if (cookieOfNightThemeValue)
        {
            _main_BackColor = "#325032";
            _main_Color = "black";
            _footer_BackColor = "#3c5a3c";
            _footer_Color = "#ebffe1";
            _refColor = "red";

            TitleReference = TitleWhiteRef;
        }
        else
        {
            _main_BackColor = ""; _main_Color = "";
            _footer_BackColor = ""; _footer_Color = "";
            _refColor = "";

            TitleReference = TitleBlackRef;
        }
        StateHasChanged();
    }

    void OpenInputContainer()
    {
        if (_viewOfNavmenuButtons == "visible")
        {
            _viewOfNavmenuButtons = "hidden";
        }
        else
        {
            _viewOfNavmenuButtons = "visible";
        }
    }

    async Task EditNightThemeCookies()
    {
        if (await localStorage.GetItemAsync<bool>("nightTheme"))
        {
            await localStorage.SetItemAsync("nightTheme", false);
            SetStylesOfNightTheme(false);
        }
        else
        {
            await localStorage.SetItemAsync("nightTheme", true);
            SetStylesOfNightTheme(true);
        }
    }
}
