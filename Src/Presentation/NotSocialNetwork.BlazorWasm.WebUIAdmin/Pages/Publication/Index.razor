@page "/Publication"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h1>Publications</h1>

<h3 style="color:red">@errorMessage</h3>

@if (publications != null &&
    currentIndex != 0)
{
    <button class="btn btn-outline-warning" @onclick="GetPreviousPublications">Get previous publications</button>
}
@if (publications != null &&
    publications.Count() == 10)
{
    <button class="btn btn-outline-success" @onclick="GetNextPublications">Get more publications</button>
}

<table class="table">
    <tr>
        <th>@nameof(PublicationDTO.Id)</th>
        <th>@nameof(PublicationDTO.Text)</th>
        <th>Author name</th>
        <th>Author image</th>
    </tr>
    @if (publications != null)
    {
        @foreach (var publication in publications)
        {
            <tr>
                <th>@publication.Id</th>
                <th>@publication.Text</th>
                <th><a href="User/Details/@publication.Author.Id">@publication.Author.Name</a></th>
                <th><img src="../userImages/@publication.Author.Image.Title" style="width:100px;height:100px" /></th>

                <th><a href="Publication/Details/@publication.Id" class="btn btn-outline-primary">Details</a></th>
                <th><a href="Publication/Edit/@publication.Id" class="btn btn-outline-primary">Edit</a></th>
                <th><a href="Publication/Delete/@publication.Id" class="btn btn-outline-danger">Delete</a></th>
            </tr>
        }
    }
    else
    {
        <tr>
            <th>
                <h1>Loading...</h1>
            </th>
        </tr>
    }
</table>

<h3 style="color:red">@errorMessage</h3>
@if (publications != null &&
    currentIndex != 0)
{
    <button class="btn btn-outline-warning" @onclick="GetPreviousPublications">Get previous publications</button>
}
@if (publications != null &&
    publications.Count() == 10)
{
    <button class="btn btn-outline-success" @onclick="GetNextPublications">Get more publications</button>
}


@code {
    private int currentIndex = 0;
    private string errorMessage = string.Empty;
    private IEnumerable<PublicationDTO> publications;

    protected override async Task OnInitializedAsync() =>
        publications = await GetPublications();

    private async Task<IEnumerable<PublicationDTO>> GetPublications()
    {
        try
        {
            publications = await Http.GetFromJsonAsync<IEnumerable<PublicationDTO>>($"api/AdminPublication/index={currentIndex}");

            return publications;
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await GetPreviousPublications();
                errorMessage = "No more publications...";

                return publications;
            }
            else if (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized || ex.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                NavigationManager.NavigateTo("/BlazorClient/Login");
                return null;
            }
            else
            {
                errorMessage = ex.Message;
                return publications;
            }
        }
    }

    private async Task GetNextPublications()
    {
        currentIndex++;

        publications = await GetPublications();
    }

    private async Task GetPreviousPublications()
    {
        currentIndex--;

        publications = await GetPublications();
    }
}
