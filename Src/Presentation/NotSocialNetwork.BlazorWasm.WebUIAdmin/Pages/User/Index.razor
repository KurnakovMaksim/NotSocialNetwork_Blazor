@page "/User"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage

<h1>Users</h1>

<h3 style="color:red">@errorMessage</h3>

@if (users != null &&
  currentIndex != 0)
{
    <button class="btn btn-outline-warning" @onclick="GetPreviousUsers">Get previous users</button>
}
@if (users != null &&
  users.Count() == 10)
{
    <button class="btn btn-outline-success" @onclick="GetNextUsers">Get more users</button>
}

<table class="table">
    <tr>
        <th>@nameof(UserDTO.Id)</th>
        <th>@nameof(UserDTO.Email)</th>
        <th>@nameof(UserDTO.Name)</th>
        <th>@nameof(UserDTO.Image)</th>
    </tr>
    @if (users != null)
    {
        @foreach (var user in users)
        {
            <tr>
                <th>@user.Id</th>
                <th>@user.Email</th>
                <th>@user.Name</th>
                <th><img src="../userImages/@user.Image.Title" style="width:100px;height:100px" /></th>

                <th><a href="User/Details/@user.Id" class="btn btn-outline-primary">Details</a></th>
                <th><a href="User/Edit/@user.Id" class="btn btn-outline-primary">Edit</a></th>
                <th><a href="User/Delete/@user.Id" class="btn btn-outline-danger">Delete</a></th>
            </tr>
        }
    }
    else
    {
        <tr>
            <th>
                <h1>Loading...</h1>
            </th>
        </tr>
    }
</table>

<h3 style="color:red">@errorMessage</h3>
@if (users != null &&
  currentIndex != 0)
{
    <button class="btn btn-outline-warning" @onclick="GetPreviousUsers">Get previous users</button>
}
@if (users != null &&
  users.Count() == 10)
{
    <button class="btn btn-outline-success" @onclick="GetNextUsers">Get more users</button>
}


@code {
    private int currentIndex = 0;
    private string errorMessage = string.Empty;
    private IEnumerable<UserDTO> users;

    protected override async Task OnInitializedAsync() =>
        users = await GetUsers();

    private async Task<IEnumerable<UserDTO>> GetUsers()
    {
        try
        {
            var token = await CookieHelper.GetToken(localStorage);
            HttpHelper.SetJwtHeader(Http, token);

            users = await Http.GetFromJsonAsync<IEnumerable<UserDTO>>($"api/AdminUser/index={currentIndex}");

            return users;
        }
        catch(HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await GetPreviousUsers();
                errorMessage = "No more users...";

                return users;
            }
            else if(ex.StatusCode == System.Net.HttpStatusCode.Unauthorized || ex.StatusCode == System.Net.HttpStatusCode.Forbidden)
            {
                NavigationManager.NavigateTo("/BlazorClient/Login");
                return null;
            }
            else
            {
                errorMessage = ex.Message;
                return users;
            }
        }
    }

    private async Task GetNextUsers()
    {
        currentIndex++;

        users = await GetUsers();
    }

    private async Task GetPreviousUsers()
    {
        currentIndex--;

        users = await GetUsers();
    }
}
